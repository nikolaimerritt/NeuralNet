### YamlMime:ManagedReference
items:
- uid: NeuralNetLearning.Maths.VectorFunctions
  commentId: T:NeuralNetLearning.Maths.VectorFunctions
  id: VectorFunctions
  parent: NeuralNetLearning.Maths
  children:
  - NeuralNetLearning.Maths.VectorFunctions.BasisVector(System.Int32,System.Int32)
  - NeuralNetLearning.Maths.VectorFunctions.BasisVectors(System.Int32)
  - NeuralNetLearning.Maths.VectorFunctions.IsFinite(MathNet.Numerics.LinearAlgebra.Vector{System.Double})
  - NeuralNetLearning.Maths.VectorFunctions.Read(System.String)
  - NeuralNetLearning.Maths.VectorFunctions.StdNormal(System.Int32)
  - NeuralNetLearning.Maths.VectorFunctions.StdUniform(System.Int32)
  - NeuralNetLearning.Maths.VectorFunctions.Write(MathNet.Numerics.LinearAlgebra.Vector{System.Double},System.String)
  langs:
  - csharp
  - vb
  name: VectorFunctions
  nameWithType: VectorFunctions
  fullName: NeuralNetLearning.Maths.VectorFunctions
  type: Class
  source:
    remote:
      path: NeuralNetLearning/Maths/VectorFunctions.cs
      branch: master
      repo: https://github.com/nikolaimerritt/NeuralNet.git
    id: VectorFunctions
    path: NeuralNetLearning/Maths/VectorFunctions.cs
    startLine: 11
  assemblies:
  - NeuralNet
  namespace: NeuralNetLearning.Maths
  syntax:
    content: public static class VectorFunctions
    content.vb: Public Module VectorFunctions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: NeuralNetLearning.Maths.VectorFunctions.StdNormal(System.Int32)
  commentId: M:NeuralNetLearning.Maths.VectorFunctions.StdNormal(System.Int32)
  id: StdNormal(System.Int32)
  parent: NeuralNetLearning.Maths.VectorFunctions
  langs:
  - csharp
  - vb
  name: StdNormal(Int32)
  nameWithType: VectorFunctions.StdNormal(Int32)
  fullName: NeuralNetLearning.Maths.VectorFunctions.StdNormal(System.Int32)
  type: Method
  source:
    remote:
      path: NeuralNetLearning/Maths/VectorFunctions.cs
      branch: master
      repo: https://github.com/nikolaimerritt/NeuralNet.git
    id: StdNormal
    path: NeuralNetLearning/Maths/VectorFunctions.cs
    startLine: 13
  assemblies:
  - NeuralNet
  namespace: NeuralNetLearning.Maths
  syntax:
    content: public static Vector<double> StdNormal(int dim)
    parameters:
    - id: dim
      type: System.Int32
    return:
      type: MathNet.Numerics.LinearAlgebra.Vector{System.Double}
    content.vb: Public Shared Function StdNormal(dim As Integer) As Vector(Of Double)
  overload: NeuralNetLearning.Maths.VectorFunctions.StdNormal*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NeuralNetLearning.Maths.VectorFunctions.StdUniform(System.Int32)
  commentId: M:NeuralNetLearning.Maths.VectorFunctions.StdUniform(System.Int32)
  id: StdUniform(System.Int32)
  parent: NeuralNetLearning.Maths.VectorFunctions
  langs:
  - csharp
  - vb
  name: StdUniform(Int32)
  nameWithType: VectorFunctions.StdUniform(Int32)
  fullName: NeuralNetLearning.Maths.VectorFunctions.StdUniform(System.Int32)
  type: Method
  source:
    remote:
      path: NeuralNetLearning/Maths/VectorFunctions.cs
      branch: master
      repo: https://github.com/nikolaimerritt/NeuralNet.git
    id: StdUniform
    path: NeuralNetLearning/Maths/VectorFunctions.cs
    startLine: 16
  assemblies:
  - NeuralNet
  namespace: NeuralNetLearning.Maths
  syntax:
    content: public static Vector<double> StdUniform(int dim)
    parameters:
    - id: dim
      type: System.Int32
    return:
      type: MathNet.Numerics.LinearAlgebra.Vector{System.Double}
    content.vb: Public Shared Function StdUniform(dim As Integer) As Vector(Of Double)
  overload: NeuralNetLearning.Maths.VectorFunctions.StdUniform*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NeuralNetLearning.Maths.VectorFunctions.Read(System.String)
  commentId: M:NeuralNetLearning.Maths.VectorFunctions.Read(System.String)
  id: Read(System.String)
  parent: NeuralNetLearning.Maths.VectorFunctions
  langs:
  - csharp
  - vb
  name: Read(String)
  nameWithType: VectorFunctions.Read(String)
  fullName: NeuralNetLearning.Maths.VectorFunctions.Read(System.String)
  type: Method
  source:
    remote:
      path: NeuralNetLearning/Maths/VectorFunctions.cs
      branch: master
      repo: https://github.com/nikolaimerritt/NeuralNet.git
    id: Read
    path: NeuralNetLearning/Maths/VectorFunctions.cs
    startLine: 19
  assemblies:
  - NeuralNet
  namespace: NeuralNetLearning.Maths
  syntax:
    content: public static Vector<double> Read(string filepath)
    parameters:
    - id: filepath
      type: System.String
    return:
      type: MathNet.Numerics.LinearAlgebra.Vector{System.Double}
    content.vb: Public Shared Function Read(filepath As String) As Vector(Of Double)
  overload: NeuralNetLearning.Maths.VectorFunctions.Read*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NeuralNetLearning.Maths.VectorFunctions.Write(MathNet.Numerics.LinearAlgebra.Vector{System.Double},System.String)
  commentId: M:NeuralNetLearning.Maths.VectorFunctions.Write(MathNet.Numerics.LinearAlgebra.Vector{System.Double},System.String)
  id: Write(MathNet.Numerics.LinearAlgebra.Vector{System.Double},System.String)
  isExtensionMethod: true
  parent: NeuralNetLearning.Maths.VectorFunctions
  langs:
  - csharp
  - vb
  name: Write(Vector<Double>, String)
  nameWithType: VectorFunctions.Write(Vector<Double>, String)
  fullName: NeuralNetLearning.Maths.VectorFunctions.Write(MathNet.Numerics.LinearAlgebra.Vector<System.Double>, System.String)
  type: Method
  source:
    remote:
      path: NeuralNetLearning/Maths/VectorFunctions.cs
      branch: master
      repo: https://github.com/nikolaimerritt/NeuralNet.git
    id: Write
    path: NeuralNetLearning/Maths/VectorFunctions.cs
    startLine: 36
  assemblies:
  - NeuralNet
  namespace: NeuralNetLearning.Maths
  syntax:
    content: public static void Write(this Vector<double> vector, string filepath)
    parameters:
    - id: vector
      type: MathNet.Numerics.LinearAlgebra.Vector{System.Double}
    - id: filepath
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Write(vector As Vector(Of Double), filepath As String)
  overload: NeuralNetLearning.Maths.VectorFunctions.Write*
  nameWithType.vb: VectorFunctions.Write(Vector(Of Double), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NeuralNetLearning.Maths.VectorFunctions.Write(MathNet.Numerics.LinearAlgebra.Vector(Of System.Double), System.String)
  name.vb: Write(Vector(Of Double), String)
- uid: NeuralNetLearning.Maths.VectorFunctions.BasisVector(System.Int32,System.Int32)
  commentId: M:NeuralNetLearning.Maths.VectorFunctions.BasisVector(System.Int32,System.Int32)
  id: BasisVector(System.Int32,System.Int32)
  parent: NeuralNetLearning.Maths.VectorFunctions
  langs:
  - csharp
  - vb
  name: BasisVector(Int32, Int32)
  nameWithType: VectorFunctions.BasisVector(Int32, Int32)
  fullName: NeuralNetLearning.Maths.VectorFunctions.BasisVector(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: NeuralNetLearning/Maths/VectorFunctions.cs
      branch: master
      repo: https://github.com/nikolaimerritt/NeuralNet.git
    id: BasisVector
    path: NeuralNetLearning/Maths/VectorFunctions.cs
    startLine: 42
  assemblies:
  - NeuralNet
  namespace: NeuralNetLearning.Maths
  syntax:
    content: public static Vector<double> BasisVector(int length, int oneIdx)
    parameters:
    - id: length
      type: System.Int32
    - id: oneIdx
      type: System.Int32
    return:
      type: MathNet.Numerics.LinearAlgebra.Vector{System.Double}
    content.vb: Public Shared Function BasisVector(length As Integer, oneIdx As Integer) As Vector(Of Double)
  overload: NeuralNetLearning.Maths.VectorFunctions.BasisVector*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NeuralNetLearning.Maths.VectorFunctions.BasisVectors(System.Int32)
  commentId: M:NeuralNetLearning.Maths.VectorFunctions.BasisVectors(System.Int32)
  id: BasisVectors(System.Int32)
  parent: NeuralNetLearning.Maths.VectorFunctions
  langs:
  - csharp
  - vb
  name: BasisVectors(Int32)
  nameWithType: VectorFunctions.BasisVectors(Int32)
  fullName: NeuralNetLearning.Maths.VectorFunctions.BasisVectors(System.Int32)
  type: Method
  source:
    remote:
      path: NeuralNetLearning/Maths/VectorFunctions.cs
      branch: master
      repo: https://github.com/nikolaimerritt/NeuralNet.git
    id: BasisVectors
    path: NeuralNetLearning/Maths/VectorFunctions.cs
    startLine: 45
  assemblies:
  - NeuralNet
  namespace: NeuralNetLearning.Maths
  syntax:
    content: public static Vector<double>[] BasisVectors(int length)
    parameters:
    - id: length
      type: System.Int32
    return:
      type: MathNet.Numerics.LinearAlgebra.Vector{System.Double}[]
    content.vb: Public Shared Function BasisVectors(length As Integer) As Vector(Of Double)()
  overload: NeuralNetLearning.Maths.VectorFunctions.BasisVectors*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NeuralNetLearning.Maths.VectorFunctions.IsFinite(MathNet.Numerics.LinearAlgebra.Vector{System.Double})
  commentId: M:NeuralNetLearning.Maths.VectorFunctions.IsFinite(MathNet.Numerics.LinearAlgebra.Vector{System.Double})
  id: IsFinite(MathNet.Numerics.LinearAlgebra.Vector{System.Double})
  parent: NeuralNetLearning.Maths.VectorFunctions
  langs:
  - csharp
  - vb
  name: IsFinite(Vector<Double>)
  nameWithType: VectorFunctions.IsFinite(Vector<Double>)
  fullName: NeuralNetLearning.Maths.VectorFunctions.IsFinite(MathNet.Numerics.LinearAlgebra.Vector<System.Double>)
  type: Method
  source:
    remote:
      path: NeuralNetLearning/Maths/VectorFunctions.cs
      branch: master
      repo: https://github.com/nikolaimerritt/NeuralNet.git
    id: IsFinite
    path: NeuralNetLearning/Maths/VectorFunctions.cs
    startLine: 55
  assemblies:
  - NeuralNet
  namespace: NeuralNetLearning.Maths
  syntax:
    content: public static bool IsFinite(Vector<double> vector)
    parameters:
    - id: vector
      type: MathNet.Numerics.LinearAlgebra.Vector{System.Double}
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsFinite(vector As Vector(Of Double)) As Boolean
  overload: NeuralNetLearning.Maths.VectorFunctions.IsFinite*
  nameWithType.vb: VectorFunctions.IsFinite(Vector(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NeuralNetLearning.Maths.VectorFunctions.IsFinite(MathNet.Numerics.LinearAlgebra.Vector(Of System.Double))
  name.vb: IsFinite(Vector(Of Double))
references:
- uid: NeuralNetLearning.Maths
  commentId: N:NeuralNetLearning.Maths
  name: NeuralNetLearning.Maths
  nameWithType: NeuralNetLearning.Maths
  fullName: NeuralNetLearning.Maths
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NeuralNetLearning.Maths.VectorFunctions.StdNormal*
  commentId: Overload:NeuralNetLearning.Maths.VectorFunctions.StdNormal
  name: StdNormal
  nameWithType: VectorFunctions.StdNormal
  fullName: NeuralNetLearning.Maths.VectorFunctions.StdNormal
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: MathNet.Numerics.LinearAlgebra.Vector{System.Double}
  commentId: T:MathNet.Numerics.LinearAlgebra.Vector{System.Double}
  parent: MathNet.Numerics.LinearAlgebra
  definition: MathNet.Numerics.LinearAlgebra.Vector`1
  name: Vector<Double>
  nameWithType: Vector<Double>
  fullName: MathNet.Numerics.LinearAlgebra.Vector<System.Double>
  nameWithType.vb: Vector(Of Double)
  fullName.vb: MathNet.Numerics.LinearAlgebra.Vector(Of System.Double)
  name.vb: Vector(Of Double)
  spec.csharp:
  - uid: MathNet.Numerics.LinearAlgebra.Vector`1
    name: Vector
    nameWithType: Vector
    fullName: MathNet.Numerics.LinearAlgebra.Vector
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MathNet.Numerics.LinearAlgebra.Vector`1
    name: Vector
    nameWithType: Vector
    fullName: MathNet.Numerics.LinearAlgebra.Vector
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MathNet.Numerics.LinearAlgebra.Vector`1
  commentId: T:MathNet.Numerics.LinearAlgebra.Vector`1
  isExternal: true
  name: Vector<T>
  nameWithType: Vector<T>
  fullName: MathNet.Numerics.LinearAlgebra.Vector<T>
  nameWithType.vb: Vector(Of T)
  fullName.vb: MathNet.Numerics.LinearAlgebra.Vector(Of T)
  name.vb: Vector(Of T)
  spec.csharp:
  - uid: MathNet.Numerics.LinearAlgebra.Vector`1
    name: Vector
    nameWithType: Vector
    fullName: MathNet.Numerics.LinearAlgebra.Vector
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MathNet.Numerics.LinearAlgebra.Vector`1
    name: Vector
    nameWithType: Vector
    fullName: MathNet.Numerics.LinearAlgebra.Vector
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MathNet.Numerics.LinearAlgebra
  commentId: N:MathNet.Numerics.LinearAlgebra
  isExternal: true
  name: MathNet.Numerics.LinearAlgebra
  nameWithType: MathNet.Numerics.LinearAlgebra
  fullName: MathNet.Numerics.LinearAlgebra
- uid: NeuralNetLearning.Maths.VectorFunctions.StdUniform*
  commentId: Overload:NeuralNetLearning.Maths.VectorFunctions.StdUniform
  name: StdUniform
  nameWithType: VectorFunctions.StdUniform
  fullName: NeuralNetLearning.Maths.VectorFunctions.StdUniform
- uid: NeuralNetLearning.Maths.VectorFunctions.Read*
  commentId: Overload:NeuralNetLearning.Maths.VectorFunctions.Read
  name: Read
  nameWithType: VectorFunctions.Read
  fullName: NeuralNetLearning.Maths.VectorFunctions.Read
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: NeuralNetLearning.Maths.VectorFunctions.Write*
  commentId: Overload:NeuralNetLearning.Maths.VectorFunctions.Write
  name: Write
  nameWithType: VectorFunctions.Write
  fullName: NeuralNetLearning.Maths.VectorFunctions.Write
- uid: NeuralNetLearning.Maths.VectorFunctions.BasisVector*
  commentId: Overload:NeuralNetLearning.Maths.VectorFunctions.BasisVector
  name: BasisVector
  nameWithType: VectorFunctions.BasisVector
  fullName: NeuralNetLearning.Maths.VectorFunctions.BasisVector
- uid: NeuralNetLearning.Maths.VectorFunctions.BasisVectors*
  commentId: Overload:NeuralNetLearning.Maths.VectorFunctions.BasisVectors
  name: BasisVectors
  nameWithType: VectorFunctions.BasisVectors
  fullName: NeuralNetLearning.Maths.VectorFunctions.BasisVectors
- uid: MathNet.Numerics.LinearAlgebra.Vector{System.Double}[]
  isExternal: true
  name: Vector<Double>[]
  nameWithType: Vector<Double>[]
  fullName: MathNet.Numerics.LinearAlgebra.Vector<System.Double>[]
  nameWithType.vb: Vector(Of Double)()
  fullName.vb: MathNet.Numerics.LinearAlgebra.Vector(Of System.Double)()
  name.vb: Vector(Of Double)()
  spec.csharp:
  - uid: MathNet.Numerics.LinearAlgebra.Vector`1
    name: Vector
    nameWithType: Vector
    fullName: MathNet.Numerics.LinearAlgebra.Vector
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: MathNet.Numerics.LinearAlgebra.Vector`1
    name: Vector
    nameWithType: Vector
    fullName: MathNet.Numerics.LinearAlgebra.Vector
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: NeuralNetLearning.Maths.VectorFunctions.IsFinite*
  commentId: Overload:NeuralNetLearning.Maths.VectorFunctions.IsFinite
  name: IsFinite
  nameWithType: VectorFunctions.IsFinite
  fullName: NeuralNetLearning.Maths.VectorFunctions.IsFinite
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
