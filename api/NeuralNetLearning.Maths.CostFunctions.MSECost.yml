### YamlMime:ManagedReference
items:
- uid: NeuralNetLearning.Maths.CostFunctions.MSECost
  commentId: T:NeuralNetLearning.Maths.CostFunctions.MSECost
  id: MSECost
  parent: NeuralNetLearning.Maths.CostFunctions
  children:
  - NeuralNetLearning.Maths.CostFunctions.MSECost.#ctor
  - NeuralNetLearning.Maths.CostFunctions.MSECost.Apply(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})
  - NeuralNetLearning.Maths.CostFunctions.MSECost.Derivative(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})
  langs:
  - csharp
  - vb
  name: MSECost
  nameWithType: MSECost
  fullName: NeuralNetLearning.Maths.CostFunctions.MSECost
  type: Class
  source:
    remote:
      path: NeuralNetLearning/Maths/CostFunctions/MSECost.cs
      branch: master
      repo: https://github.com/nikolaimerritt/NeuralNet.git
    id: MSECost
    path: NeuralNetLearning/Maths/CostFunctions/MSECost.cs
    startLine: 9
  assemblies:
  - NeuralNet
  namespace: NeuralNetLearning.Maths.CostFunctions
  syntax:
    content: 'public class MSECost : CostFunction'
    content.vb: >-
      Public Class MSECost
          Inherits CostFunction
  inheritance:
  - System.Object
  - NeuralNetLearning.Maths.CostFunctions.CostFunction
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: NeuralNetLearning.Maths.CostFunctions.MSECost.#ctor
  commentId: M:NeuralNetLearning.Maths.CostFunctions.MSECost.#ctor
  id: '#ctor'
  parent: NeuralNetLearning.Maths.CostFunctions.MSECost
  langs:
  - csharp
  - vb
  name: MSECost()
  nameWithType: MSECost.MSECost()
  fullName: NeuralNetLearning.Maths.CostFunctions.MSECost.MSECost()
  type: Constructor
  source:
    remote:
      path: NeuralNetLearning/Maths/CostFunctions/MSECost.cs
      branch: master
      repo: https://github.com/nikolaimerritt/NeuralNet.git
    id: .ctor
    path: NeuralNetLearning/Maths/CostFunctions/MSECost.cs
    startLine: 11
  assemblies:
  - NeuralNet
  namespace: NeuralNetLearning.Maths.CostFunctions
  syntax:
    content: public MSECost()
    content.vb: Public Sub New
  overload: NeuralNetLearning.Maths.CostFunctions.MSECost.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NeuralNetLearning.Maths.CostFunctions.MSECost.Apply(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})
  commentId: M:NeuralNetLearning.Maths.CostFunctions.MSECost.Apply(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})
  id: Apply(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})
  parent: NeuralNetLearning.Maths.CostFunctions.MSECost
  langs:
  - csharp
  - vb
  name: Apply(Vector<Double>, Vector<Double>)
  nameWithType: MSECost.Apply(Vector<Double>, Vector<Double>)
  fullName: NeuralNetLearning.Maths.CostFunctions.MSECost.Apply(MathNet.Numerics.LinearAlgebra.Vector<System.Double>, MathNet.Numerics.LinearAlgebra.Vector<System.Double>)
  type: Method
  source:
    remote:
      path: NeuralNetLearning/Maths/CostFunctions/MSECost.cs
      branch: master
      repo: https://github.com/nikolaimerritt/NeuralNet.git
    id: Apply
    path: NeuralNetLearning/Maths/CostFunctions/MSECost.cs
    startLine: 13
  assemblies:
  - NeuralNet
  namespace: NeuralNetLearning.Maths.CostFunctions
  syntax:
    content: public override double Apply(Vector<double> estimated, Vector<double> actual)
    parameters:
    - id: estimated
      type: MathNet.Numerics.LinearAlgebra.Vector{System.Double}
    - id: actual
      type: MathNet.Numerics.LinearAlgebra.Vector{System.Double}
    return:
      type: System.Double
    content.vb: Public Overrides Function Apply(estimated As Vector(Of Double), actual As Vector(Of Double)) As Double
  overridden: NeuralNetLearning.Maths.CostFunctions.CostFunction.Apply(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})
  overload: NeuralNetLearning.Maths.CostFunctions.MSECost.Apply*
  nameWithType.vb: MSECost.Apply(Vector(Of Double), Vector(Of Double))
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: NeuralNetLearning.Maths.CostFunctions.MSECost.Apply(MathNet.Numerics.LinearAlgebra.Vector(Of System.Double), MathNet.Numerics.LinearAlgebra.Vector(Of System.Double))
  name.vb: Apply(Vector(Of Double), Vector(Of Double))
- uid: NeuralNetLearning.Maths.CostFunctions.MSECost.Derivative(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})
  commentId: M:NeuralNetLearning.Maths.CostFunctions.MSECost.Derivative(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})
  id: Derivative(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})
  parent: NeuralNetLearning.Maths.CostFunctions.MSECost
  langs:
  - csharp
  - vb
  name: Derivative(Vector<Double>, Vector<Double>)
  nameWithType: MSECost.Derivative(Vector<Double>, Vector<Double>)
  fullName: NeuralNetLearning.Maths.CostFunctions.MSECost.Derivative(MathNet.Numerics.LinearAlgebra.Vector<System.Double>, MathNet.Numerics.LinearAlgebra.Vector<System.Double>)
  type: Method
  source:
    remote:
      path: NeuralNetLearning/Maths/CostFunctions/MSECost.cs
      branch: master
      repo: https://github.com/nikolaimerritt/NeuralNet.git
    id: Derivative
    path: NeuralNetLearning/Maths/CostFunctions/MSECost.cs
    startLine: 19
  assemblies:
  - NeuralNet
  namespace: NeuralNetLearning.Maths.CostFunctions
  syntax:
    content: public override Vector<double> Derivative(Vector<double> estimated, Vector<double> actual)
    parameters:
    - id: estimated
      type: MathNet.Numerics.LinearAlgebra.Vector{System.Double}
    - id: actual
      type: MathNet.Numerics.LinearAlgebra.Vector{System.Double}
    return:
      type: MathNet.Numerics.LinearAlgebra.Vector{System.Double}
    content.vb: Public Overrides Function Derivative(estimated As Vector(Of Double), actual As Vector(Of Double)) As Vector(Of Double)
  overridden: NeuralNetLearning.Maths.CostFunctions.CostFunction.Derivative(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})
  overload: NeuralNetLearning.Maths.CostFunctions.MSECost.Derivative*
  nameWithType.vb: MSECost.Derivative(Vector(Of Double), Vector(Of Double))
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: NeuralNetLearning.Maths.CostFunctions.MSECost.Derivative(MathNet.Numerics.LinearAlgebra.Vector(Of System.Double), MathNet.Numerics.LinearAlgebra.Vector(Of System.Double))
  name.vb: Derivative(Vector(Of Double), Vector(Of Double))
references:
- uid: NeuralNetLearning.Maths.CostFunctions
  commentId: N:NeuralNetLearning.Maths.CostFunctions
  name: NeuralNetLearning.Maths.CostFunctions
  nameWithType: NeuralNetLearning.Maths.CostFunctions
  fullName: NeuralNetLearning.Maths.CostFunctions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NeuralNetLearning.Maths.CostFunctions.CostFunction
  commentId: T:NeuralNetLearning.Maths.CostFunctions.CostFunction
  parent: NeuralNetLearning.Maths.CostFunctions
  name: CostFunction
  nameWithType: CostFunction
  fullName: NeuralNetLearning.Maths.CostFunctions.CostFunction
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NeuralNetLearning.Maths.CostFunctions.MSECost.#ctor*
  commentId: Overload:NeuralNetLearning.Maths.CostFunctions.MSECost.#ctor
  name: MSECost
  nameWithType: MSECost.MSECost
  fullName: NeuralNetLearning.Maths.CostFunctions.MSECost.MSECost
- uid: NeuralNetLearning.Maths.CostFunctions.CostFunction.Apply(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})
  commentId: M:NeuralNetLearning.Maths.CostFunctions.CostFunction.Apply(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})
  parent: NeuralNetLearning.Maths.CostFunctions.CostFunction
  isExternal: true
  name: Apply(Vector<Double>, Vector<Double>)
  nameWithType: CostFunction.Apply(Vector<Double>, Vector<Double>)
  fullName: NeuralNetLearning.Maths.CostFunctions.CostFunction.Apply(MathNet.Numerics.LinearAlgebra.Vector<System.Double>, MathNet.Numerics.LinearAlgebra.Vector<System.Double>)
  nameWithType.vb: CostFunction.Apply(Vector(Of Double), Vector(Of Double))
  fullName.vb: NeuralNetLearning.Maths.CostFunctions.CostFunction.Apply(MathNet.Numerics.LinearAlgebra.Vector(Of System.Double), MathNet.Numerics.LinearAlgebra.Vector(Of System.Double))
  name.vb: Apply(Vector(Of Double), Vector(Of Double))
  spec.csharp:
  - uid: NeuralNetLearning.Maths.CostFunctions.CostFunction.Apply(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})
    name: Apply
    nameWithType: CostFunction.Apply
    fullName: NeuralNetLearning.Maths.CostFunctions.CostFunction.Apply
  - name: (
    nameWithType: (
    fullName: (
  - uid: MathNet.Numerics.LinearAlgebra.Vector`1
    name: Vector
    nameWithType: Vector
    fullName: MathNet.Numerics.LinearAlgebra.Vector
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MathNet.Numerics.LinearAlgebra.Vector`1
    name: Vector
    nameWithType: Vector
    fullName: MathNet.Numerics.LinearAlgebra.Vector
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NeuralNetLearning.Maths.CostFunctions.CostFunction.Apply(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})
    name: Apply
    nameWithType: CostFunction.Apply
    fullName: NeuralNetLearning.Maths.CostFunctions.CostFunction.Apply
  - name: (
    nameWithType: (
    fullName: (
  - uid: MathNet.Numerics.LinearAlgebra.Vector`1
    name: Vector
    nameWithType: Vector
    fullName: MathNet.Numerics.LinearAlgebra.Vector
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MathNet.Numerics.LinearAlgebra.Vector`1
    name: Vector
    nameWithType: Vector
    fullName: MathNet.Numerics.LinearAlgebra.Vector
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NeuralNetLearning.Maths.CostFunctions.MSECost.Apply*
  commentId: Overload:NeuralNetLearning.Maths.CostFunctions.MSECost.Apply
  name: Apply
  nameWithType: MSECost.Apply
  fullName: NeuralNetLearning.Maths.CostFunctions.MSECost.Apply
- uid: MathNet.Numerics.LinearAlgebra.Vector{System.Double}
  commentId: T:MathNet.Numerics.LinearAlgebra.Vector{System.Double}
  parent: MathNet.Numerics.LinearAlgebra
  definition: MathNet.Numerics.LinearAlgebra.Vector`1
  name: Vector<Double>
  nameWithType: Vector<Double>
  fullName: MathNet.Numerics.LinearAlgebra.Vector<System.Double>
  nameWithType.vb: Vector(Of Double)
  fullName.vb: MathNet.Numerics.LinearAlgebra.Vector(Of System.Double)
  name.vb: Vector(Of Double)
  spec.csharp:
  - uid: MathNet.Numerics.LinearAlgebra.Vector`1
    name: Vector
    nameWithType: Vector
    fullName: MathNet.Numerics.LinearAlgebra.Vector
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MathNet.Numerics.LinearAlgebra.Vector`1
    name: Vector
    nameWithType: Vector
    fullName: MathNet.Numerics.LinearAlgebra.Vector
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: MathNet.Numerics.LinearAlgebra.Vector`1
  commentId: T:MathNet.Numerics.LinearAlgebra.Vector`1
  isExternal: true
  name: Vector<T>
  nameWithType: Vector<T>
  fullName: MathNet.Numerics.LinearAlgebra.Vector<T>
  nameWithType.vb: Vector(Of T)
  fullName.vb: MathNet.Numerics.LinearAlgebra.Vector(Of T)
  name.vb: Vector(Of T)
  spec.csharp:
  - uid: MathNet.Numerics.LinearAlgebra.Vector`1
    name: Vector
    nameWithType: Vector
    fullName: MathNet.Numerics.LinearAlgebra.Vector
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MathNet.Numerics.LinearAlgebra.Vector`1
    name: Vector
    nameWithType: Vector
    fullName: MathNet.Numerics.LinearAlgebra.Vector
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MathNet.Numerics.LinearAlgebra
  commentId: N:MathNet.Numerics.LinearAlgebra
  isExternal: true
  name: MathNet.Numerics.LinearAlgebra
  nameWithType: MathNet.Numerics.LinearAlgebra
  fullName: MathNet.Numerics.LinearAlgebra
- uid: NeuralNetLearning.Maths.CostFunctions.CostFunction.Derivative(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})
  commentId: M:NeuralNetLearning.Maths.CostFunctions.CostFunction.Derivative(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})
  parent: NeuralNetLearning.Maths.CostFunctions.CostFunction
  isExternal: true
  name: Derivative(Vector<Double>, Vector<Double>)
  nameWithType: CostFunction.Derivative(Vector<Double>, Vector<Double>)
  fullName: NeuralNetLearning.Maths.CostFunctions.CostFunction.Derivative(MathNet.Numerics.LinearAlgebra.Vector<System.Double>, MathNet.Numerics.LinearAlgebra.Vector<System.Double>)
  nameWithType.vb: CostFunction.Derivative(Vector(Of Double), Vector(Of Double))
  fullName.vb: NeuralNetLearning.Maths.CostFunctions.CostFunction.Derivative(MathNet.Numerics.LinearAlgebra.Vector(Of System.Double), MathNet.Numerics.LinearAlgebra.Vector(Of System.Double))
  name.vb: Derivative(Vector(Of Double), Vector(Of Double))
  spec.csharp:
  - uid: NeuralNetLearning.Maths.CostFunctions.CostFunction.Derivative(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})
    name: Derivative
    nameWithType: CostFunction.Derivative
    fullName: NeuralNetLearning.Maths.CostFunctions.CostFunction.Derivative
  - name: (
    nameWithType: (
    fullName: (
  - uid: MathNet.Numerics.LinearAlgebra.Vector`1
    name: Vector
    nameWithType: Vector
    fullName: MathNet.Numerics.LinearAlgebra.Vector
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MathNet.Numerics.LinearAlgebra.Vector`1
    name: Vector
    nameWithType: Vector
    fullName: MathNet.Numerics.LinearAlgebra.Vector
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NeuralNetLearning.Maths.CostFunctions.CostFunction.Derivative(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})
    name: Derivative
    nameWithType: CostFunction.Derivative
    fullName: NeuralNetLearning.Maths.CostFunctions.CostFunction.Derivative
  - name: (
    nameWithType: (
    fullName: (
  - uid: MathNet.Numerics.LinearAlgebra.Vector`1
    name: Vector
    nameWithType: Vector
    fullName: MathNet.Numerics.LinearAlgebra.Vector
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MathNet.Numerics.LinearAlgebra.Vector`1
    name: Vector
    nameWithType: Vector
    fullName: MathNet.Numerics.LinearAlgebra.Vector
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NeuralNetLearning.Maths.CostFunctions.MSECost.Derivative*
  commentId: Overload:NeuralNetLearning.Maths.CostFunctions.MSECost.Derivative
  name: Derivative
  nameWithType: MSECost.Derivative
  fullName: NeuralNetLearning.Maths.CostFunctions.MSECost.Derivative
