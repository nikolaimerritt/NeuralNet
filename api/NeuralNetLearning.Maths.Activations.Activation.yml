### YamlMime:ManagedReference
items:
- uid: NeuralNetLearning.Maths.Activations.Activation
  commentId: T:NeuralNetLearning.Maths.Activations.Activation
  id: Activation
  parent: NeuralNetLearning.Maths.Activations
  children:
  - NeuralNetLearning.Maths.Activations.Activation.Apply(MathNet.Numerics.LinearAlgebra.Vector{System.Double})
  - NeuralNetLearning.Maths.Activations.Activation.ApplyDerivative(MathNet.Numerics.LinearAlgebra.Vector{System.Double})
  langs:
  - csharp
  - vb
  name: Activation
  nameWithType: Activation
  fullName: NeuralNetLearning.Maths.Activations.Activation
  type: Class
  source:
    remote:
      path: NeuralNetLearning/Maths/Activations/Activation.cs
      branch: master
      repo: https://github.com/nikolaimerritt/NeuralNet.git
    id: Activation
    path: NeuralNetLearning/Maths/Activations/Activation.cs
    startLine: 15
  assemblies:
  - NeuralNet
  namespace: NeuralNetLearning.Maths.Activations
  summary: "\nRepresents the activation function that is applied to a neural layer.\n"
  example: []
  syntax:
    content: public abstract class Activation
    content.vb: Public MustInherit Class Activation
  inheritance:
  - System.Object
  derivedClasses:
  - NeuralNetLearning.Maths.Activations.IdentityActivation
  - NeuralNetLearning.Maths.Activations.ReluActivation
  - NeuralNetLearning.Maths.Activations.SoftmaxActivation
  - NeuralNetLearning.Maths.Activations.TanhActivation
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: NeuralNetLearning.Maths.Activations.Activation.Apply(MathNet.Numerics.LinearAlgebra.Vector{System.Double})
  commentId: M:NeuralNetLearning.Maths.Activations.Activation.Apply(MathNet.Numerics.LinearAlgebra.Vector{System.Double})
  id: Apply(MathNet.Numerics.LinearAlgebra.Vector{System.Double})
  parent: NeuralNetLearning.Maths.Activations.Activation
  langs:
  - csharp
  - vb
  name: Apply(Vector<Double>)
  nameWithType: Activation.Apply(Vector<Double>)
  fullName: NeuralNetLearning.Maths.Activations.Activation.Apply(MathNet.Numerics.LinearAlgebra.Vector<System.Double>)
  type: Method
  source:
    remote:
      path: NeuralNetLearning/Maths/Activations/Activation.cs
      branch: master
      repo: https://github.com/nikolaimerritt/NeuralNet.git
    id: Apply
    path: NeuralNetLearning/Maths/Activations/Activation.cs
    startLine: 20
  assemblies:
  - NeuralNet
  namespace: NeuralNetLearning.Maths.Activations
  summary: "\nReturns the resulting <xref href=\"MathNet.Numerics.LinearAlgebra.Vector%601\" data-throw-if-not-resolved=\"false\"></xref> on applying the activation function to <code data-dev-comment-type=\"paramref\" class=\"paramref\">input</code>.\n"
  example: []
  syntax:
    content: public abstract Vector<double> Apply(Vector<double> input)
    parameters:
    - id: input
      type: MathNet.Numerics.LinearAlgebra.Vector{System.Double}
    return:
      type: MathNet.Numerics.LinearAlgebra.Vector{System.Double}
    content.vb: Public MustOverride Function Apply(input As Vector(Of Double)) As Vector(Of Double)
  overload: NeuralNetLearning.Maths.Activations.Activation.Apply*
  nameWithType.vb: Activation.Apply(Vector(Of Double))
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: NeuralNetLearning.Maths.Activations.Activation.Apply(MathNet.Numerics.LinearAlgebra.Vector(Of System.Double))
  name.vb: Apply(Vector(Of Double))
- uid: NeuralNetLearning.Maths.Activations.Activation.ApplyDerivative(MathNet.Numerics.LinearAlgebra.Vector{System.Double})
  commentId: M:NeuralNetLearning.Maths.Activations.Activation.ApplyDerivative(MathNet.Numerics.LinearAlgebra.Vector{System.Double})
  id: ApplyDerivative(MathNet.Numerics.LinearAlgebra.Vector{System.Double})
  parent: NeuralNetLearning.Maths.Activations.Activation
  langs:
  - csharp
  - vb
  name: ApplyDerivative(Vector<Double>)
  nameWithType: Activation.ApplyDerivative(Vector<Double>)
  fullName: NeuralNetLearning.Maths.Activations.Activation.ApplyDerivative(MathNet.Numerics.LinearAlgebra.Vector<System.Double>)
  type: Method
  source:
    remote:
      path: NeuralNetLearning/Maths/Activations/Activation.cs
      branch: master
      repo: https://github.com/nikolaimerritt/NeuralNet.git
    id: ApplyDerivative
    path: NeuralNetLearning/Maths/Activations/Activation.cs
    startLine: 28
  assemblies:
  - NeuralNet
  namespace: NeuralNetLearning.Maths.Activations
  summary: "\nReturns the matrix of derivatives of the activation function evaluated with <code data-dev-comment-type=\"paramref\" class=\"paramref\">input</code>. \n<p>\nThe <code>[r, c]</code> entry is the derivative of the <code>r</code>th component of the activation function, with respect to the <code>c</code>th component of the input.\n</p>\n"
  example: []
  syntax:
    content: public abstract Matrix<double> ApplyDerivative(Vector<double> input)
    parameters:
    - id: input
      type: MathNet.Numerics.LinearAlgebra.Vector{System.Double}
    return:
      type: MathNet.Numerics.LinearAlgebra.Matrix{System.Double}
    content.vb: Public MustOverride Function ApplyDerivative(input As Vector(Of Double)) As Matrix(Of Double)
  overload: NeuralNetLearning.Maths.Activations.Activation.ApplyDerivative*
  nameWithType.vb: Activation.ApplyDerivative(Vector(Of Double))
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: NeuralNetLearning.Maths.Activations.Activation.ApplyDerivative(MathNet.Numerics.LinearAlgebra.Vector(Of System.Double))
  name.vb: ApplyDerivative(Vector(Of Double))
references:
- uid: NeuralNetLearning.Maths.Activations
  commentId: N:NeuralNetLearning.Maths.Activations
  name: NeuralNetLearning.Maths.Activations
  nameWithType: NeuralNetLearning.Maths.Activations
  fullName: NeuralNetLearning.Maths.Activations
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: MathNet.Numerics.LinearAlgebra.Vector`1
  commentId: T:MathNet.Numerics.LinearAlgebra.Vector`1
  isExternal: true
  name: Vector<T>
  nameWithType: Vector<T>
  fullName: MathNet.Numerics.LinearAlgebra.Vector<T>
  nameWithType.vb: Vector(Of T)
  fullName.vb: MathNet.Numerics.LinearAlgebra.Vector(Of T)
  name.vb: Vector(Of T)
  spec.csharp:
  - uid: MathNet.Numerics.LinearAlgebra.Vector`1
    name: Vector
    nameWithType: Vector
    fullName: MathNet.Numerics.LinearAlgebra.Vector
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MathNet.Numerics.LinearAlgebra.Vector`1
    name: Vector
    nameWithType: Vector
    fullName: MathNet.Numerics.LinearAlgebra.Vector
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NeuralNetLearning.Maths.Activations.Activation.Apply*
  commentId: Overload:NeuralNetLearning.Maths.Activations.Activation.Apply
  name: Apply
  nameWithType: Activation.Apply
  fullName: NeuralNetLearning.Maths.Activations.Activation.Apply
- uid: MathNet.Numerics.LinearAlgebra.Vector{System.Double}
  commentId: T:MathNet.Numerics.LinearAlgebra.Vector{System.Double}
  parent: MathNet.Numerics.LinearAlgebra
  definition: MathNet.Numerics.LinearAlgebra.Vector`1
  name: Vector<Double>
  nameWithType: Vector<Double>
  fullName: MathNet.Numerics.LinearAlgebra.Vector<System.Double>
  nameWithType.vb: Vector(Of Double)
  fullName.vb: MathNet.Numerics.LinearAlgebra.Vector(Of System.Double)
  name.vb: Vector(Of Double)
  spec.csharp:
  - uid: MathNet.Numerics.LinearAlgebra.Vector`1
    name: Vector
    nameWithType: Vector
    fullName: MathNet.Numerics.LinearAlgebra.Vector
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MathNet.Numerics.LinearAlgebra.Vector`1
    name: Vector
    nameWithType: Vector
    fullName: MathNet.Numerics.LinearAlgebra.Vector
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MathNet.Numerics.LinearAlgebra
  commentId: N:MathNet.Numerics.LinearAlgebra
  isExternal: true
  name: MathNet.Numerics.LinearAlgebra
  nameWithType: MathNet.Numerics.LinearAlgebra
  fullName: MathNet.Numerics.LinearAlgebra
- uid: NeuralNetLearning.Maths.Activations.Activation.ApplyDerivative*
  commentId: Overload:NeuralNetLearning.Maths.Activations.Activation.ApplyDerivative
  name: ApplyDerivative
  nameWithType: Activation.ApplyDerivative
  fullName: NeuralNetLearning.Maths.Activations.Activation.ApplyDerivative
- uid: MathNet.Numerics.LinearAlgebra.Matrix{System.Double}
  commentId: T:MathNet.Numerics.LinearAlgebra.Matrix{System.Double}
  parent: MathNet.Numerics.LinearAlgebra
  definition: MathNet.Numerics.LinearAlgebra.Matrix`1
  name: Matrix<Double>
  nameWithType: Matrix<Double>
  fullName: MathNet.Numerics.LinearAlgebra.Matrix<System.Double>
  nameWithType.vb: Matrix(Of Double)
  fullName.vb: MathNet.Numerics.LinearAlgebra.Matrix(Of System.Double)
  name.vb: Matrix(Of Double)
  spec.csharp:
  - uid: MathNet.Numerics.LinearAlgebra.Matrix`1
    name: Matrix
    nameWithType: Matrix
    fullName: MathNet.Numerics.LinearAlgebra.Matrix
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MathNet.Numerics.LinearAlgebra.Matrix`1
    name: Matrix
    nameWithType: Matrix
    fullName: MathNet.Numerics.LinearAlgebra.Matrix
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MathNet.Numerics.LinearAlgebra.Matrix`1
  commentId: T:MathNet.Numerics.LinearAlgebra.Matrix`1
  isExternal: true
  name: Matrix<T>
  nameWithType: Matrix<T>
  fullName: MathNet.Numerics.LinearAlgebra.Matrix<T>
  nameWithType.vb: Matrix(Of T)
  fullName.vb: MathNet.Numerics.LinearAlgebra.Matrix(Of T)
  name.vb: Matrix(Of T)
  spec.csharp:
  - uid: MathNet.Numerics.LinearAlgebra.Matrix`1
    name: Matrix
    nameWithType: Matrix
    fullName: MathNet.Numerics.LinearAlgebra.Matrix
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MathNet.Numerics.LinearAlgebra.Matrix`1
    name: Matrix
    nameWithType: Matrix
    fullName: MathNet.Numerics.LinearAlgebra.Matrix
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
