### YamlMime:ManagedReference
items:
- uid: NeuralNetLearning.Serialization.HyperParamEncoder
  commentId: T:NeuralNetLearning.Serialization.HyperParamEncoder
  id: HyperParamEncoder
  parent: NeuralNetLearning.Serialization
  children:
  - NeuralNetLearning.Serialization.HyperParamEncoder.#ctor
  - NeuralNetLearning.Serialization.HyperParamEncoder.Decode(System.String,System.String)
  - NeuralNetLearning.Serialization.HyperParamEncoder.DecodeTypeName(System.String)
  - NeuralNetLearning.Serialization.HyperParamEncoder.Encode(System.String,System.ValueTuple{System.String,System.Double}[])
  - NeuralNetLearning.Serialization.HyperParamEncoder.EncodeToFile(System.String,System.String,System.ValueTuple{System.String,System.Double}[])
  langs:
  - csharp
  - vb
  name: HyperParamEncoder
  nameWithType: HyperParamEncoder
  fullName: NeuralNetLearning.Serialization.HyperParamEncoder
  type: Class
  source:
    remote:
      path: NeuralNetLearning/Serialization/HyperParamEncoder.cs
      branch: master
      repo: https://github.com/nikolaimerritt/NeuralNet.git
    id: HyperParamEncoder
    path: NeuralNetLearning/Serialization/HyperParamEncoder.cs
    startLine: 6
  assemblies:
  - NeuralNet
  namespace: NeuralNetLearning.Serialization
  syntax:
    content: public class HyperParamEncoder
    content.vb: Public Class HyperParamEncoder
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: NeuralNetLearning.Serialization.HyperParamEncoder.#ctor
  commentId: M:NeuralNetLearning.Serialization.HyperParamEncoder.#ctor
  id: '#ctor'
  parent: NeuralNetLearning.Serialization.HyperParamEncoder
  langs:
  - csharp
  - vb
  name: HyperParamEncoder()
  nameWithType: HyperParamEncoder.HyperParamEncoder()
  fullName: NeuralNetLearning.Serialization.HyperParamEncoder.HyperParamEncoder()
  type: Constructor
  source:
    remote:
      path: NeuralNetLearning/Serialization/HyperParamEncoder.cs
      branch: master
      repo: https://github.com/nikolaimerritt/NeuralNet.git
    id: .ctor
    path: NeuralNetLearning/Serialization/HyperParamEncoder.cs
    startLine: 8
  assemblies:
  - NeuralNet
  namespace: NeuralNetLearning.Serialization
  syntax:
    content: public HyperParamEncoder()
    content.vb: Public Sub New
  overload: NeuralNetLearning.Serialization.HyperParamEncoder.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NeuralNetLearning.Serialization.HyperParamEncoder.Encode(System.String,System.ValueTuple{System.String,System.Double}[])
  commentId: M:NeuralNetLearning.Serialization.HyperParamEncoder.Encode(System.String,System.ValueTuple{System.String,System.Double}[])
  id: Encode(System.String,System.ValueTuple{System.String,System.Double}[])
  parent: NeuralNetLearning.Serialization.HyperParamEncoder
  langs:
  - csharp
  - vb
  name: Encode(String, (String, Double)[])
  nameWithType: HyperParamEncoder.Encode(String, (String, Double)[])
  fullName: NeuralNetLearning.Serialization.HyperParamEncoder.Encode(System.String, System.ValueTuple<System.String, System.Double>[])
  type: Method
  source:
    remote:
      path: NeuralNetLearning/Serialization/HyperParamEncoder.cs
      branch: master
      repo: https://github.com/nikolaimerritt/NeuralNet.git
    id: Encode
    path: NeuralNetLearning/Serialization/HyperParamEncoder.cs
    startLine: 10
  assemblies:
  - NeuralNet
  namespace: NeuralNetLearning.Serialization
  syntax:
    content: public static string Encode(string typeName, params (string, double)[] namesWithVals)
    parameters:
    - id: typeName
      type: System.String
    - id: namesWithVals
      type: System.ValueTuple{System.String,System.Double}[]
    return:
      type: System.String
    content.vb: Public Shared Function Encode(typeName As String, ParamArray namesWithVals As(String, Double)(Of String , Double)()) As String
  overload: NeuralNetLearning.Serialization.HyperParamEncoder.Encode*
  nameWithType.vb: HyperParamEncoder.Encode(String, (String, Double)(Of String, Double)())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NeuralNetLearning.Serialization.HyperParamEncoder.Encode(System.String, System.ValueTuple(Of System.String, System.Double)())
  name.vb: Encode(String, (String, Double)(Of String, Double)())
- uid: NeuralNetLearning.Serialization.HyperParamEncoder.EncodeToFile(System.String,System.String,System.ValueTuple{System.String,System.Double}[])
  commentId: M:NeuralNetLearning.Serialization.HyperParamEncoder.EncodeToFile(System.String,System.String,System.ValueTuple{System.String,System.Double}[])
  id: EncodeToFile(System.String,System.String,System.ValueTuple{System.String,System.Double}[])
  parent: NeuralNetLearning.Serialization.HyperParamEncoder
  langs:
  - csharp
  - vb
  name: EncodeToFile(String, String, (String, Double)[])
  nameWithType: HyperParamEncoder.EncodeToFile(String, String, (String, Double)[])
  fullName: NeuralNetLearning.Serialization.HyperParamEncoder.EncodeToFile(System.String, System.String, System.ValueTuple<System.String, System.Double>[])
  type: Method
  source:
    remote:
      path: NeuralNetLearning/Serialization/HyperParamEncoder.cs
      branch: master
      repo: https://github.com/nikolaimerritt/NeuralNet.git
    id: EncodeToFile
    path: NeuralNetLearning/Serialization/HyperParamEncoder.cs
    startLine: 20
  assemblies:
  - NeuralNet
  namespace: NeuralNetLearning.Serialization
  syntax:
    content: public static void EncodeToFile(string typeName, string filepath, params (string, double)[] namesWithVals)
    parameters:
    - id: typeName
      type: System.String
    - id: filepath
      type: System.String
    - id: namesWithVals
      type: System.ValueTuple{System.String,System.Double}[]
    content.vb: Public Shared Sub EncodeToFile(typeName As String, filepath As String, ParamArray namesWithVals As(String, Double)(Of String , Double)())
  overload: NeuralNetLearning.Serialization.HyperParamEncoder.EncodeToFile*
  nameWithType.vb: HyperParamEncoder.EncodeToFile(String, String, (String, Double)(Of String, Double)())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NeuralNetLearning.Serialization.HyperParamEncoder.EncodeToFile(System.String, System.String, System.ValueTuple(Of System.String, System.Double)())
  name.vb: EncodeToFile(String, String, (String, Double)(Of String, Double)())
- uid: NeuralNetLearning.Serialization.HyperParamEncoder.DecodeTypeName(System.String)
  commentId: M:NeuralNetLearning.Serialization.HyperParamEncoder.DecodeTypeName(System.String)
  id: DecodeTypeName(System.String)
  parent: NeuralNetLearning.Serialization.HyperParamEncoder
  langs:
  - csharp
  - vb
  name: DecodeTypeName(String)
  nameWithType: HyperParamEncoder.DecodeTypeName(String)
  fullName: NeuralNetLearning.Serialization.HyperParamEncoder.DecodeTypeName(System.String)
  type: Method
  source:
    remote:
      path: NeuralNetLearning/Serialization/HyperParamEncoder.cs
      branch: master
      repo: https://github.com/nikolaimerritt/NeuralNet.git
    id: DecodeTypeName
    path: NeuralNetLearning/Serialization/HyperParamEncoder.cs
    startLine: 23
  assemblies:
  - NeuralNet
  namespace: NeuralNetLearning.Serialization
  syntax:
    content: public static string DecodeTypeName(string filepath)
    parameters:
    - id: filepath
      type: System.String
    return:
      type: System.String
    content.vb: Public Shared Function DecodeTypeName(filepath As String) As String
  overload: NeuralNetLearning.Serialization.HyperParamEncoder.DecodeTypeName*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NeuralNetLearning.Serialization.HyperParamEncoder.Decode(System.String,System.String)
  commentId: M:NeuralNetLearning.Serialization.HyperParamEncoder.Decode(System.String,System.String)
  id: Decode(System.String,System.String)
  parent: NeuralNetLearning.Serialization.HyperParamEncoder
  langs:
  - csharp
  - vb
  name: Decode(String, String)
  nameWithType: HyperParamEncoder.Decode(String, String)
  fullName: NeuralNetLearning.Serialization.HyperParamEncoder.Decode(System.String, System.String)
  type: Method
  source:
    remote:
      path: NeuralNetLearning/Serialization/HyperParamEncoder.cs
      branch: master
      repo: https://github.com/nikolaimerritt/NeuralNet.git
    id: Decode
    path: NeuralNetLearning/Serialization/HyperParamEncoder.cs
    startLine: 26
  assemblies:
  - NeuralNet
  namespace: NeuralNetLearning.Serialization
  syntax:
    content: public static double Decode(string filepath, string paramName)
    parameters:
    - id: filepath
      type: System.String
    - id: paramName
      type: System.String
    return:
      type: System.Double
    content.vb: Public Shared Function Decode(filepath As String, paramName As String) As Double
  overload: NeuralNetLearning.Serialization.HyperParamEncoder.Decode*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: NeuralNetLearning.Serialization
  commentId: N:NeuralNetLearning.Serialization
  name: NeuralNetLearning.Serialization
  nameWithType: NeuralNetLearning.Serialization
  fullName: NeuralNetLearning.Serialization
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NeuralNetLearning.Serialization.HyperParamEncoder.#ctor*
  commentId: Overload:NeuralNetLearning.Serialization.HyperParamEncoder.#ctor
  name: HyperParamEncoder
  nameWithType: HyperParamEncoder.HyperParamEncoder
  fullName: NeuralNetLearning.Serialization.HyperParamEncoder.HyperParamEncoder
- uid: NeuralNetLearning.Serialization.HyperParamEncoder.Encode*
  commentId: Overload:NeuralNetLearning.Serialization.HyperParamEncoder.Encode
  name: Encode
  nameWithType: HyperParamEncoder.Encode
  fullName: NeuralNetLearning.Serialization.HyperParamEncoder.Encode
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ValueTuple{System.String,System.Double}[]
  isExternal: true
  name: (T1, T2)<String, Double>[]
  nameWithType: (T1, T2)<String, Double>[]
  fullName: System.ValueTuple<System.String, System.Double>[]
  nameWithType.vb: (T1, T2)(Of String, Double)()
  fullName.vb: System.ValueTuple(Of System.String, System.Double)()
  name.vb: (T1, T2)(Of String, Double)()
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: NeuralNetLearning.Serialization.HyperParamEncoder.EncodeToFile*
  commentId: Overload:NeuralNetLearning.Serialization.HyperParamEncoder.EncodeToFile
  name: EncodeToFile
  nameWithType: HyperParamEncoder.EncodeToFile
  fullName: NeuralNetLearning.Serialization.HyperParamEncoder.EncodeToFile
- uid: NeuralNetLearning.Serialization.HyperParamEncoder.DecodeTypeName*
  commentId: Overload:NeuralNetLearning.Serialization.HyperParamEncoder.DecodeTypeName
  name: DecodeTypeName
  nameWithType: HyperParamEncoder.DecodeTypeName
  fullName: NeuralNetLearning.Serialization.HyperParamEncoder.DecodeTypeName
- uid: NeuralNetLearning.Serialization.HyperParamEncoder.Decode*
  commentId: Overload:NeuralNetLearning.Serialization.HyperParamEncoder.Decode
  name: Decode
  nameWithType: HyperParamEncoder.Decode
  fullName: NeuralNetLearning.Serialization.HyperParamEncoder.Decode
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
