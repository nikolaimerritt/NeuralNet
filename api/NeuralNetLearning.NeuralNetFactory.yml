### YamlMime:ManagedReference
items:
- uid: NeuralNetLearning.NeuralNetFactory
  commentId: T:NeuralNetLearning.NeuralNetFactory
  id: NeuralNetFactory
  parent: NeuralNetLearning
  children:
  - NeuralNetLearning.NeuralNetFactory.ActivationsFolder
  - NeuralNetLearning.NeuralNetFactory.CostFolder
  - NeuralNetLearning.NeuralNetFactory.GradientDescenderFolder
  - NeuralNetLearning.NeuralNetFactory.OptimisedForRelu(System.Collections.Generic.IList{NeuralNetLearning.LayerConfig.NeuralLayerConfig},NeuralNetLearning.Maths.GradientDescenders.GradientDescender,NeuralNetLearning.Maths.CostFunctions.CostFunction)
  - NeuralNetLearning.NeuralNetFactory.OptimisedForTanh(System.Collections.Generic.IList{NeuralNetLearning.LayerConfig.NeuralLayerConfig},NeuralNetLearning.Maths.GradientDescenders.GradientDescender,NeuralNetLearning.Maths.CostFunctions.CostFunction)
  - NeuralNetLearning.NeuralNetFactory.OptimisedForTrainingData(System.Collections.Generic.IList{NeuralNetLearning.LayerConfig.NeuralLayerConfig},System.Collections.Generic.IEnumerable{MathNet.Numerics.LinearAlgebra.Vector{System.Double}},NeuralNetLearning.Maths.GradientDescenders.GradientDescender,NeuralNetLearning.Maths.CostFunctions.CostFunction)
  - NeuralNetLearning.NeuralNetFactory.OptimisedForTrainingData(System.Collections.Generic.IList{NeuralNetLearning.LayerConfig.NeuralLayerConfig},System.Collections.Generic.IEnumerable{System.ValueTuple{MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double}}},NeuralNetLearning.Maths.GradientDescenders.GradientDescender,NeuralNetLearning.Maths.CostFunctions.CostFunction)
  - NeuralNetLearning.NeuralNetFactory.ParamsFolder
  - NeuralNetLearning.NeuralNetFactory.ReadFromDirectory(System.String)
  langs:
  - csharp
  - vb
  name: NeuralNetFactory
  nameWithType: NeuralNetFactory
  fullName: NeuralNetLearning.NeuralNetFactory
  type: Class
  source:
    remote:
      path: NeuralNetLearning/NeuralNetFactory.cs
      branch: master
      repo: https://github.com/nikolaimerritt/NeuralNet.git
    id: NeuralNetFactory
    path: NeuralNetLearning/NeuralNetFactory.cs
    startLine: 18
  assemblies:
  - NeuralNet
  namespace: NeuralNetLearning
  syntax:
    content: public static class NeuralNetFactory
    content.vb: Public Module NeuralNetFactory
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: NeuralNetLearning.NeuralNetFactory.CostFolder
  commentId: F:NeuralNetLearning.NeuralNetFactory.CostFolder
  id: CostFolder
  parent: NeuralNetLearning.NeuralNetFactory
  langs:
  - csharp
  - vb
  name: CostFolder
  nameWithType: NeuralNetFactory.CostFolder
  fullName: NeuralNetLearning.NeuralNetFactory.CostFolder
  type: Field
  source:
    remote:
      path: NeuralNetLearning/NeuralNetFactory.cs
      branch: master
      repo: https://github.com/nikolaimerritt/NeuralNet.git
    id: CostFolder
    path: NeuralNetLearning/NeuralNetFactory.cs
    startLine: 23
  assemblies:
  - NeuralNet
  namespace: NeuralNetLearning
  summary: "\nThe name of the file in which the <xref href=\"NeuralNetLearning.Maths.CostFunctions.CostFunction\" data-throw-if-not-resolved=\"false\"></xref> used by a <xref href=\"NeuralNetLearning.NeuralNet\" data-throw-if-not-resolved=\"false\"></xref> is recorded when writing a <xref href=\"NeuralNetLearning.NeuralNet\" data-throw-if-not-resolved=\"false\"></xref> to a directory.\n"
  example: []
  syntax:
    content: public static readonly string CostFolder
    return:
      type: System.String
    content.vb: Public Shared ReadOnly CostFolder As String
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NeuralNetLearning.NeuralNetFactory.ParamsFolder
  commentId: F:NeuralNetLearning.NeuralNetFactory.ParamsFolder
  id: ParamsFolder
  parent: NeuralNetLearning.NeuralNetFactory
  langs:
  - csharp
  - vb
  name: ParamsFolder
  nameWithType: NeuralNetFactory.ParamsFolder
  fullName: NeuralNetLearning.NeuralNetFactory.ParamsFolder
  type: Field
  source:
    remote:
      path: NeuralNetLearning/NeuralNetFactory.cs
      branch: master
      repo: https://github.com/nikolaimerritt/NeuralNet.git
    id: ParamsFolder
    path: NeuralNetLearning/NeuralNetFactory.cs
    startLine: 27
  assemblies:
  - NeuralNet
  namespace: NeuralNetLearning
  summary: "\nThe name of the folder in which the <xref href=\"NeuralNetLearning.Maths.Parameter\" data-throw-if-not-resolved=\"false\"></xref> used by a <xref href=\"NeuralNetLearning.NeuralNet\" data-throw-if-not-resolved=\"false\"></xref> is recorded when writing a <xref href=\"NeuralNetLearning.NeuralNet\" data-throw-if-not-resolved=\"false\"></xref> to a directory.\n"
  example: []
  syntax:
    content: public static readonly string ParamsFolder
    return:
      type: System.String
    content.vb: Public Shared ReadOnly ParamsFolder As String
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NeuralNetLearning.NeuralNetFactory.ActivationsFolder
  commentId: F:NeuralNetLearning.NeuralNetFactory.ActivationsFolder
  id: ActivationsFolder
  parent: NeuralNetLearning.NeuralNetFactory
  langs:
  - csharp
  - vb
  name: ActivationsFolder
  nameWithType: NeuralNetFactory.ActivationsFolder
  fullName: NeuralNetLearning.NeuralNetFactory.ActivationsFolder
  type: Field
  source:
    remote:
      path: NeuralNetLearning/NeuralNetFactory.cs
      branch: master
      repo: https://github.com/nikolaimerritt/NeuralNet.git
    id: ActivationsFolder
    path: NeuralNetLearning/NeuralNetFactory.cs
    startLine: 31
  assemblies:
  - NeuralNet
  namespace: NeuralNetLearning
  summary: "\nThe name of the folder in which the <xref href=\"NeuralNetLearning.Maths.Activations.Activation\" data-throw-if-not-resolved=\"false\"></xref>s used by a <xref href=\"NeuralNetLearning.NeuralNet\" data-throw-if-not-resolved=\"false\"></xref> are recorded when writing a <xref href=\"NeuralNetLearning.NeuralNet\" data-throw-if-not-resolved=\"false\"></xref> to a directory.\n"
  example: []
  syntax:
    content: public static readonly string ActivationsFolder
    return:
      type: System.String
    content.vb: Public Shared ReadOnly ActivationsFolder As String
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NeuralNetLearning.NeuralNetFactory.GradientDescenderFolder
  commentId: F:NeuralNetLearning.NeuralNetFactory.GradientDescenderFolder
  id: GradientDescenderFolder
  parent: NeuralNetLearning.NeuralNetFactory
  langs:
  - csharp
  - vb
  name: GradientDescenderFolder
  nameWithType: NeuralNetFactory.GradientDescenderFolder
  fullName: NeuralNetLearning.NeuralNetFactory.GradientDescenderFolder
  type: Field
  source:
    remote:
      path: NeuralNetLearning/NeuralNetFactory.cs
      branch: master
      repo: https://github.com/nikolaimerritt/NeuralNet.git
    id: GradientDescenderFolder
    path: NeuralNetLearning/NeuralNetFactory.cs
    startLine: 35
  assemblies:
  - NeuralNet
  namespace: NeuralNetLearning
  summary: "\nThe name of the folder in which the <xref href=\"NeuralNetLearning.Maths.GradientDescenders.GradientDescender\" data-throw-if-not-resolved=\"false\"></xref> used by a <xref href=\"NeuralNetLearning.NeuralNet\" data-throw-if-not-resolved=\"false\"></xref> is recorded when writing a <xref href=\"NeuralNetLearning.NeuralNet\" data-throw-if-not-resolved=\"false\"></xref> to a directory.\n"
  example: []
  syntax:
    content: public static readonly string GradientDescenderFolder
    return:
      type: System.String
    content.vb: Public Shared ReadOnly GradientDescenderFolder As String
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NeuralNetLearning.NeuralNetFactory.OptimisedForTanh(System.Collections.Generic.IList{NeuralNetLearning.LayerConfig.NeuralLayerConfig},NeuralNetLearning.Maths.GradientDescenders.GradientDescender,NeuralNetLearning.Maths.CostFunctions.CostFunction)
  commentId: M:NeuralNetLearning.NeuralNetFactory.OptimisedForTanh(System.Collections.Generic.IList{NeuralNetLearning.LayerConfig.NeuralLayerConfig},NeuralNetLearning.Maths.GradientDescenders.GradientDescender,NeuralNetLearning.Maths.CostFunctions.CostFunction)
  id: OptimisedForTanh(System.Collections.Generic.IList{NeuralNetLearning.LayerConfig.NeuralLayerConfig},NeuralNetLearning.Maths.GradientDescenders.GradientDescender,NeuralNetLearning.Maths.CostFunctions.CostFunction)
  parent: NeuralNetLearning.NeuralNetFactory
  langs:
  - csharp
  - vb
  name: OptimisedForTanh(IList<NeuralLayerConfig>, GradientDescender, CostFunction)
  nameWithType: NeuralNetFactory.OptimisedForTanh(IList<NeuralLayerConfig>, GradientDescender, CostFunction)
  fullName: NeuralNetLearning.NeuralNetFactory.OptimisedForTanh(System.Collections.Generic.IList<NeuralNetLearning.LayerConfig.NeuralLayerConfig>, NeuralNetLearning.Maths.GradientDescenders.GradientDescender, NeuralNetLearning.Maths.CostFunctions.CostFunction)
  type: Method
  source:
    remote:
      path: NeuralNetLearning/NeuralNetFactory.cs
      branch: master
      repo: https://github.com/nikolaimerritt/NeuralNet.git
    id: OptimisedForTanh
    path: NeuralNetLearning/NeuralNetFactory.cs
    startLine: 48
  assemblies:
  - NeuralNet
  namespace: NeuralNetLearning
  summary: "\nReturns a random <xref href=\"NeuralNetLearning.NeuralNet\" data-throw-if-not-resolved=\"false\"></xref> that is optimised for the use of <xref href=\"NeuralNetLearning.Maths.Activations.TanhActivation\" data-throw-if-not-resolved=\"false\"></xref>. \n<p>\nUses <a href=\"https://proceedings.mlr.press/v9/glorot10a/glorot10a.pdf\">Xavier initialisation</a>.\n</p>\n"
  example: []
  syntax:
    content: public static NeuralNet OptimisedForTanh(IList<NeuralLayerConfig> layerStructure, GradientDescender gradientDescender, CostFunction cost)
    parameters:
    - id: layerStructure
      type: System.Collections.Generic.IList{NeuralNetLearning.LayerConfig.NeuralLayerConfig}
      description: 'The configurations of the layer that the NeuralNet will conform to. '
    - id: gradientDescender
      type: NeuralNetLearning.Maths.GradientDescenders.GradientDescender
      description: 'The gradient descender that the NeuralNet will use when executing gradient descent. '
    - id: cost
      type: NeuralNetLearning.Maths.CostFunctions.CostFunction
      description: 'The cost function that the NeuralNet will use when executing gradient descent. '
    return:
      type: NeuralNetLearning.NeuralNet
    content.vb: Public Shared Function OptimisedForTanh(layerStructure As IList(Of NeuralLayerConfig), gradientDescender As GradientDescender, cost As CostFunction) As NeuralNet
  overload: NeuralNetLearning.NeuralNetFactory.OptimisedForTanh*
  nameWithType.vb: NeuralNetFactory.OptimisedForTanh(IList(Of NeuralLayerConfig), GradientDescender, CostFunction)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NeuralNetLearning.NeuralNetFactory.OptimisedForTanh(System.Collections.Generic.IList(Of NeuralNetLearning.LayerConfig.NeuralLayerConfig), NeuralNetLearning.Maths.GradientDescenders.GradientDescender, NeuralNetLearning.Maths.CostFunctions.CostFunction)
  name.vb: OptimisedForTanh(IList(Of NeuralLayerConfig), GradientDescender, CostFunction)
- uid: NeuralNetLearning.NeuralNetFactory.OptimisedForRelu(System.Collections.Generic.IList{NeuralNetLearning.LayerConfig.NeuralLayerConfig},NeuralNetLearning.Maths.GradientDescenders.GradientDescender,NeuralNetLearning.Maths.CostFunctions.CostFunction)
  commentId: M:NeuralNetLearning.NeuralNetFactory.OptimisedForRelu(System.Collections.Generic.IList{NeuralNetLearning.LayerConfig.NeuralLayerConfig},NeuralNetLearning.Maths.GradientDescenders.GradientDescender,NeuralNetLearning.Maths.CostFunctions.CostFunction)
  id: OptimisedForRelu(System.Collections.Generic.IList{NeuralNetLearning.LayerConfig.NeuralLayerConfig},NeuralNetLearning.Maths.GradientDescenders.GradientDescender,NeuralNetLearning.Maths.CostFunctions.CostFunction)
  parent: NeuralNetLearning.NeuralNetFactory
  langs:
  - csharp
  - vb
  name: OptimisedForRelu(IList<NeuralLayerConfig>, GradientDescender, CostFunction)
  nameWithType: NeuralNetFactory.OptimisedForRelu(IList<NeuralLayerConfig>, GradientDescender, CostFunction)
  fullName: NeuralNetLearning.NeuralNetFactory.OptimisedForRelu(System.Collections.Generic.IList<NeuralNetLearning.LayerConfig.NeuralLayerConfig>, NeuralNetLearning.Maths.GradientDescenders.GradientDescender, NeuralNetLearning.Maths.CostFunctions.CostFunction)
  type: Method
  source:
    remote:
      path: NeuralNetLearning/NeuralNetFactory.cs
      branch: master
      repo: https://github.com/nikolaimerritt/NeuralNet.git
    id: OptimisedForRelu
    path: NeuralNetLearning/NeuralNetFactory.cs
    startLine: 65
  assemblies:
  - NeuralNet
  namespace: NeuralNetLearning
  summary: "\nReturns a random <xref href=\"NeuralNetLearning.NeuralNet\" data-throw-if-not-resolved=\"false\"></xref> that is optimised for the use of <xref href=\"NeuralNetLearning.Maths.Activations.ReluActivation\" data-throw-if-not-resolved=\"false\"></xref>. \n<p>\nUses <a href=\"https://arxiv.org/abs/1502.01852v1\">Kaiming He</a> initialisation.\n</p>\n"
  example: []
  syntax:
    content: public static NeuralNet OptimisedForRelu(IList<NeuralLayerConfig> layerStructure, GradientDescender gradientDescender, CostFunction cost)
    parameters:
    - id: layerStructure
      type: System.Collections.Generic.IList{NeuralNetLearning.LayerConfig.NeuralLayerConfig}
      description: 'The configurations of the layer that the NeuralNet will conform to. '
    - id: gradientDescender
      type: NeuralNetLearning.Maths.GradientDescenders.GradientDescender
      description: 'The gradient descender that the NeuralNet will use when executing gradient descent. '
    - id: cost
      type: NeuralNetLearning.Maths.CostFunctions.CostFunction
      description: 'The cost function that the NeuralNet will use when executing gradient descent. '
    return:
      type: NeuralNetLearning.NeuralNet
    content.vb: Public Shared Function OptimisedForRelu(layerStructure As IList(Of NeuralLayerConfig), gradientDescender As GradientDescender, cost As CostFunction) As NeuralNet
  overload: NeuralNetLearning.NeuralNetFactory.OptimisedForRelu*
  nameWithType.vb: NeuralNetFactory.OptimisedForRelu(IList(Of NeuralLayerConfig), GradientDescender, CostFunction)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NeuralNetLearning.NeuralNetFactory.OptimisedForRelu(System.Collections.Generic.IList(Of NeuralNetLearning.LayerConfig.NeuralLayerConfig), NeuralNetLearning.Maths.GradientDescenders.GradientDescender, NeuralNetLearning.Maths.CostFunctions.CostFunction)
  name.vb: OptimisedForRelu(IList(Of NeuralLayerConfig), GradientDescender, CostFunction)
- uid: NeuralNetLearning.NeuralNetFactory.OptimisedForTrainingData(System.Collections.Generic.IList{NeuralNetLearning.LayerConfig.NeuralLayerConfig},System.Collections.Generic.IEnumerable{System.ValueTuple{MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double}}},NeuralNetLearning.Maths.GradientDescenders.GradientDescender,NeuralNetLearning.Maths.CostFunctions.CostFunction)
  commentId: M:NeuralNetLearning.NeuralNetFactory.OptimisedForTrainingData(System.Collections.Generic.IList{NeuralNetLearning.LayerConfig.NeuralLayerConfig},System.Collections.Generic.IEnumerable{System.ValueTuple{MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double}}},NeuralNetLearning.Maths.GradientDescenders.GradientDescender,NeuralNetLearning.Maths.CostFunctions.CostFunction)
  id: OptimisedForTrainingData(System.Collections.Generic.IList{NeuralNetLearning.LayerConfig.NeuralLayerConfig},System.Collections.Generic.IEnumerable{System.ValueTuple{MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double}}},NeuralNetLearning.Maths.GradientDescenders.GradientDescender,NeuralNetLearning.Maths.CostFunctions.CostFunction)
  parent: NeuralNetLearning.NeuralNetFactory
  langs:
  - csharp
  - vb
  name: OptimisedForTrainingData(IList<NeuralLayerConfig>, IEnumerable<(Vector<Double> input, Vector<Double> desiredOutput)>, GradientDescender, CostFunction)
  nameWithType: NeuralNetFactory.OptimisedForTrainingData(IList<NeuralLayerConfig>, IEnumerable<(Vector<Double> input, Vector<Double> desiredOutput)>, GradientDescender, CostFunction)
  fullName: NeuralNetLearning.NeuralNetFactory.OptimisedForTrainingData(System.Collections.Generic.IList<NeuralNetLearning.LayerConfig.NeuralLayerConfig>, System.Collections.Generic.IEnumerable<System.ValueTuple<MathNet.Numerics.LinearAlgebra.Vector<System.Double>, MathNet.Numerics.LinearAlgebra.Vector<System.Double>>>, NeuralNetLearning.Maths.GradientDescenders.GradientDescender, NeuralNetLearning.Maths.CostFunctions.CostFunction)
  type: Method
  source:
    remote:
      path: NeuralNetLearning/NeuralNetFactory.cs
      branch: master
      repo: https://github.com/nikolaimerritt/NeuralNet.git
    id: OptimisedForTrainingData
    path: NeuralNetLearning/NeuralNetFactory.cs
    startLine: 85
  assemblies:
  - NeuralNet
  namespace: NeuralNetLearning
  summary: "\nReturns a random <xref href=\"NeuralNetLearning.NeuralNet\" data-throw-if-not-resolved=\"false\"></xref> that is optimised for learning <code data-dev-comment-type=\"paramref\" class=\"paramref\">trainingData</code>.\n<p>\nUses <a href=\"http://cmp.felk.cvut.cz/~mishkdmy/papers/mishkin-iclr2016.pdf\">LSUV initialisation</a>.\n</p>\n"
  example: []
  syntax:
    content: public static NeuralNet OptimisedForTrainingData(IList<NeuralLayerConfig> layerStructure, IEnumerable<(Vector<double> input, Vector<double> desiredOutput)> trainingData, GradientDescender gradientDescender, CostFunction cost)
    parameters:
    - id: layerStructure
      type: System.Collections.Generic.IList{NeuralNetLearning.LayerConfig.NeuralLayerConfig}
      description: 'The configurations of the layer that the NeuralNet will conform to. '
    - id: trainingData
      type: System.Collections.Generic.IEnumerable{System.ValueTuple{MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double}}}
      description: "The training set which the NeuralNet will be optimised to learn. \n<p> Only the inputs are needed, so this method simply calls its overload where <code data-dev-comment-type=\"paramref\" class=\"paramref\">trainingData</code> is a list of inputs.</p>\n"
    - id: gradientDescender
      type: NeuralNetLearning.Maths.GradientDescenders.GradientDescender
      description: 'The gradient descender that the NeuralNet will use when executing gradient descent. '
    - id: cost
      type: NeuralNetLearning.Maths.CostFunctions.CostFunction
      description: 'The cost function that the NeuralNet will use when executing gradient descent. '
    return:
      type: NeuralNetLearning.NeuralNet
    content.vb: Public Shared Function OptimisedForTrainingData(layerStructure As IList(Of NeuralLayerConfig), trainingData As IEnumerable(Of(input As Vector(Of Double), desiredOutput As Vector(Of Double))(Of Vector(Of Double), Vector(Of Double)) ), gradientDescender As GradientDescender, cost As CostFunction) As NeuralNet
  overload: NeuralNetLearning.NeuralNetFactory.OptimisedForTrainingData*
  nameWithType.vb: NeuralNetFactory.OptimisedForTrainingData(IList(Of NeuralLayerConfig), IEnumerable(Of (input As Vector(Of Double), desiredOutput As Vector(Of Double))(Of Vector(Of Double), Vector(Of Double))), GradientDescender, CostFunction)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NeuralNetLearning.NeuralNetFactory.OptimisedForTrainingData(System.Collections.Generic.IList(Of NeuralNetLearning.LayerConfig.NeuralLayerConfig), System.Collections.Generic.IEnumerable(Of System.ValueTuple(Of MathNet.Numerics.LinearAlgebra.Vector(Of System.Double), MathNet.Numerics.LinearAlgebra.Vector(Of System.Double))), NeuralNetLearning.Maths.GradientDescenders.GradientDescender, NeuralNetLearning.Maths.CostFunctions.CostFunction)
  name.vb: OptimisedForTrainingData(IList(Of NeuralLayerConfig), IEnumerable(Of (input As Vector(Of Double), desiredOutput As Vector(Of Double))(Of Vector(Of Double), Vector(Of Double))), GradientDescender, CostFunction)
- uid: NeuralNetLearning.NeuralNetFactory.OptimisedForTrainingData(System.Collections.Generic.IList{NeuralNetLearning.LayerConfig.NeuralLayerConfig},System.Collections.Generic.IEnumerable{MathNet.Numerics.LinearAlgebra.Vector{System.Double}},NeuralNetLearning.Maths.GradientDescenders.GradientDescender,NeuralNetLearning.Maths.CostFunctions.CostFunction)
  commentId: M:NeuralNetLearning.NeuralNetFactory.OptimisedForTrainingData(System.Collections.Generic.IList{NeuralNetLearning.LayerConfig.NeuralLayerConfig},System.Collections.Generic.IEnumerable{MathNet.Numerics.LinearAlgebra.Vector{System.Double}},NeuralNetLearning.Maths.GradientDescenders.GradientDescender,NeuralNetLearning.Maths.CostFunctions.CostFunction)
  id: OptimisedForTrainingData(System.Collections.Generic.IList{NeuralNetLearning.LayerConfig.NeuralLayerConfig},System.Collections.Generic.IEnumerable{MathNet.Numerics.LinearAlgebra.Vector{System.Double}},NeuralNetLearning.Maths.GradientDescenders.GradientDescender,NeuralNetLearning.Maths.CostFunctions.CostFunction)
  parent: NeuralNetLearning.NeuralNetFactory
  langs:
  - csharp
  - vb
  name: OptimisedForTrainingData(IList<NeuralLayerConfig>, IEnumerable<Vector<Double>>, GradientDescender, CostFunction)
  nameWithType: NeuralNetFactory.OptimisedForTrainingData(IList<NeuralLayerConfig>, IEnumerable<Vector<Double>>, GradientDescender, CostFunction)
  fullName: NeuralNetLearning.NeuralNetFactory.OptimisedForTrainingData(System.Collections.Generic.IList<NeuralNetLearning.LayerConfig.NeuralLayerConfig>, System.Collections.Generic.IEnumerable<MathNet.Numerics.LinearAlgebra.Vector<System.Double>>, NeuralNetLearning.Maths.GradientDescenders.GradientDescender, NeuralNetLearning.Maths.CostFunctions.CostFunction)
  type: Method
  source:
    remote:
      path: NeuralNetLearning/NeuralNetFactory.cs
      branch: master
      repo: https://github.com/nikolaimerritt/NeuralNet.git
    id: OptimisedForTrainingData
    path: NeuralNetLearning/NeuralNetFactory.cs
    startLine: 101
  assemblies:
  - NeuralNet
  namespace: NeuralNetLearning
  summary: "\nReturns a random <xref href=\"NeuralNetLearning.NeuralNet\" data-throw-if-not-resolved=\"false\"></xref> that is optimised for learning <code data-dev-comment-type=\"paramref\" class=\"paramref\">trainingData</code>.\n<p>\nUses <a href=\"http://cmp.felk.cvut.cz/~mishkdmy/papers/mishkin-iclr2016.pdf\">LSUV initialisation</a>.\n</p>\n"
  example: []
  syntax:
    content: public static NeuralNet OptimisedForTrainingData(IList<NeuralLayerConfig> layerStructure, IEnumerable<Vector<double>> trainingInputs, GradientDescender gradientDescender, CostFunction cost)
    parameters:
    - id: layerStructure
      type: System.Collections.Generic.IList{NeuralNetLearning.LayerConfig.NeuralLayerConfig}
      description: 'The configurations of the layer that the NeuralNet will conform to. '
    - id: trainingInputs
      type: System.Collections.Generic.IEnumerable{MathNet.Numerics.LinearAlgebra.Vector{System.Double}}
      description: 'The inputs of the training set which the NeuralNet will be optimised to learn. '
    - id: gradientDescender
      type: NeuralNetLearning.Maths.GradientDescenders.GradientDescender
      description: 'The gradient descender that the NeuralNet will use when executing gradient descent. '
    - id: cost
      type: NeuralNetLearning.Maths.CostFunctions.CostFunction
      description: 'The cost function that the NeuralNet will use when executing gradient descent. '
    return:
      type: NeuralNetLearning.NeuralNet
    content.vb: Public Shared Function OptimisedForTrainingData(layerStructure As IList(Of NeuralLayerConfig), trainingInputs As IEnumerable(Of Vector(Of Double)), gradientDescender As GradientDescender, cost As CostFunction) As NeuralNet
  overload: NeuralNetLearning.NeuralNetFactory.OptimisedForTrainingData*
  nameWithType.vb: NeuralNetFactory.OptimisedForTrainingData(IList(Of NeuralLayerConfig), IEnumerable(Of Vector(Of Double)), GradientDescender, CostFunction)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NeuralNetLearning.NeuralNetFactory.OptimisedForTrainingData(System.Collections.Generic.IList(Of NeuralNetLearning.LayerConfig.NeuralLayerConfig), System.Collections.Generic.IEnumerable(Of MathNet.Numerics.LinearAlgebra.Vector(Of System.Double)), NeuralNetLearning.Maths.GradientDescenders.GradientDescender, NeuralNetLearning.Maths.CostFunctions.CostFunction)
  name.vb: OptimisedForTrainingData(IList(Of NeuralLayerConfig), IEnumerable(Of Vector(Of Double)), GradientDescender, CostFunction)
- uid: NeuralNetLearning.NeuralNetFactory.ReadFromDirectory(System.String)
  commentId: M:NeuralNetLearning.NeuralNetFactory.ReadFromDirectory(System.String)
  id: ReadFromDirectory(System.String)
  parent: NeuralNetLearning.NeuralNetFactory
  langs:
  - csharp
  - vb
  name: ReadFromDirectory(String)
  nameWithType: NeuralNetFactory.ReadFromDirectory(String)
  fullName: NeuralNetLearning.NeuralNetFactory.ReadFromDirectory(System.String)
  type: Method
  source:
    remote:
      path: NeuralNetLearning/NeuralNetFactory.cs
      branch: master
      repo: https://github.com/nikolaimerritt/NeuralNet.git
    id: ReadFromDirectory
    path: NeuralNetLearning/NeuralNetFactory.cs
    startLine: 118
  assemblies:
  - NeuralNet
  namespace: NeuralNetLearning
  summary: "\nReads the <xref href=\"NeuralNetLearning.NeuralNet\" data-throw-if-not-resolved=\"false\"></xref> object that has been written to <code data-dev-comment-type=\"paramref\" class=\"paramref\">directoryPath</code> using the function <xref href=\"NeuralNetLearning.NeuralNet.WriteToDirectory(System.String)\" data-throw-if-not-resolved=\"false\"></xref>.\n<p>\nThe returned <xref href=\"NeuralNetLearning.NeuralNet\" data-throw-if-not-resolved=\"false\"></xref> has equivalent <xref href=\"NeuralNetLearning.Maths.Parameter\" data-throw-if-not-resolved=\"false\"></xref> values, <xref href=\"NeuralNetLearning.Maths.Activations.Activation\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"NeuralNetLearning.Maths.GradientDescenders.GradientDescender\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"NeuralNetLearning.Maths.CostFunctions.CostFunction\" data-throw-if-not-resolved=\"false\"></xref> \ncompared to the written <xref href=\"NeuralNetLearning.NeuralNet\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n"
  example: []
  syntax:
    content: public static NeuralNet ReadFromDirectory(string directoryPath)
    parameters:
    - id: directoryPath
      type: System.String
      description: 'The (absolute or relative) path to which a Neural Net has been written. '
    return:
      type: NeuralNetLearning.NeuralNet
      description: ''
    content.vb: Public Shared Function ReadFromDirectory(directoryPath As String) As NeuralNet
  overload: NeuralNetLearning.NeuralNetFactory.ReadFromDirectory*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: NeuralNetLearning
  commentId: N:NeuralNetLearning
  name: NeuralNetLearning
  nameWithType: NeuralNetLearning
  fullName: NeuralNetLearning
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NeuralNetLearning.Maths.CostFunctions.CostFunction
  commentId: T:NeuralNetLearning.Maths.CostFunctions.CostFunction
  parent: NeuralNetLearning.Maths.CostFunctions
  name: CostFunction
  nameWithType: CostFunction
  fullName: NeuralNetLearning.Maths.CostFunctions.CostFunction
- uid: NeuralNetLearning.NeuralNet
  commentId: T:NeuralNetLearning.NeuralNet
  parent: NeuralNetLearning
  name: NeuralNet
  nameWithType: NeuralNet
  fullName: NeuralNetLearning.NeuralNet
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: NeuralNetLearning.Maths.CostFunctions
  commentId: N:NeuralNetLearning.Maths.CostFunctions
  name: NeuralNetLearning.Maths.CostFunctions
  nameWithType: NeuralNetLearning.Maths.CostFunctions
  fullName: NeuralNetLearning.Maths.CostFunctions
- uid: NeuralNetLearning.Maths.Parameter
  commentId: T:NeuralNetLearning.Maths.Parameter
  parent: NeuralNetLearning.Maths
  name: Parameter
  nameWithType: Parameter
  fullName: NeuralNetLearning.Maths.Parameter
- uid: NeuralNetLearning.Maths
  commentId: N:NeuralNetLearning.Maths
  name: NeuralNetLearning.Maths
  nameWithType: NeuralNetLearning.Maths
  fullName: NeuralNetLearning.Maths
- uid: NeuralNetLearning.Maths.Activations.Activation
  commentId: T:NeuralNetLearning.Maths.Activations.Activation
  parent: NeuralNetLearning.Maths.Activations
  name: Activation
  nameWithType: Activation
  fullName: NeuralNetLearning.Maths.Activations.Activation
- uid: NeuralNetLearning.Maths.Activations
  commentId: N:NeuralNetLearning.Maths.Activations
  name: NeuralNetLearning.Maths.Activations
  nameWithType: NeuralNetLearning.Maths.Activations
  fullName: NeuralNetLearning.Maths.Activations
- uid: NeuralNetLearning.Maths.GradientDescenders.GradientDescender
  commentId: T:NeuralNetLearning.Maths.GradientDescenders.GradientDescender
  parent: NeuralNetLearning.Maths.GradientDescenders
  name: GradientDescender
  nameWithType: GradientDescender
  fullName: NeuralNetLearning.Maths.GradientDescenders.GradientDescender
- uid: NeuralNetLearning.Maths.GradientDescenders
  commentId: N:NeuralNetLearning.Maths.GradientDescenders
  name: NeuralNetLearning.Maths.GradientDescenders
  nameWithType: NeuralNetLearning.Maths.GradientDescenders
  fullName: NeuralNetLearning.Maths.GradientDescenders
- uid: NeuralNetLearning.Maths.Activations.TanhActivation
  commentId: T:NeuralNetLearning.Maths.Activations.TanhActivation
  name: TanhActivation
  nameWithType: TanhActivation
  fullName: NeuralNetLearning.Maths.Activations.TanhActivation
- uid: NeuralNetLearning.NeuralNetFactory.OptimisedForTanh*
  commentId: Overload:NeuralNetLearning.NeuralNetFactory.OptimisedForTanh
  name: OptimisedForTanh
  nameWithType: NeuralNetFactory.OptimisedForTanh
  fullName: NeuralNetLearning.NeuralNetFactory.OptimisedForTanh
- uid: System.Collections.Generic.IList{NeuralNetLearning.LayerConfig.NeuralLayerConfig}
  commentId: T:System.Collections.Generic.IList{NeuralNetLearning.LayerConfig.NeuralLayerConfig}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<NeuralLayerConfig>
  nameWithType: IList<NeuralLayerConfig>
  fullName: System.Collections.Generic.IList<NeuralNetLearning.LayerConfig.NeuralLayerConfig>
  nameWithType.vb: IList(Of NeuralLayerConfig)
  fullName.vb: System.Collections.Generic.IList(Of NeuralNetLearning.LayerConfig.NeuralLayerConfig)
  name.vb: IList(Of NeuralLayerConfig)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NeuralNetLearning.LayerConfig.NeuralLayerConfig
    name: NeuralLayerConfig
    nameWithType: NeuralLayerConfig
    fullName: NeuralNetLearning.LayerConfig.NeuralLayerConfig
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NeuralNetLearning.LayerConfig.NeuralLayerConfig
    name: NeuralLayerConfig
    nameWithType: NeuralLayerConfig
    fullName: NeuralNetLearning.LayerConfig.NeuralLayerConfig
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: NeuralNetLearning.Maths.Activations.ReluActivation
  commentId: T:NeuralNetLearning.Maths.Activations.ReluActivation
  name: ReluActivation
  nameWithType: ReluActivation
  fullName: NeuralNetLearning.Maths.Activations.ReluActivation
- uid: NeuralNetLearning.NeuralNetFactory.OptimisedForRelu*
  commentId: Overload:NeuralNetLearning.NeuralNetFactory.OptimisedForRelu
  name: OptimisedForRelu
  nameWithType: NeuralNetFactory.OptimisedForRelu
  fullName: NeuralNetLearning.NeuralNetFactory.OptimisedForRelu
- uid: NeuralNetLearning.NeuralNetFactory.OptimisedForTrainingData*
  commentId: Overload:NeuralNetLearning.NeuralNetFactory.OptimisedForTrainingData
  name: OptimisedForTrainingData
  nameWithType: NeuralNetFactory.OptimisedForTrainingData
  fullName: NeuralNetLearning.NeuralNetFactory.OptimisedForTrainingData
- uid: System.Collections.Generic.IEnumerable{System.ValueTuple{MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double}}}
  commentId: T:System.Collections.Generic.IEnumerable{System.ValueTuple{MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double}}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<(T1, T2)<Vector<Double>, Vector<Double>>>
  nameWithType: IEnumerable<(T1, T2)<Vector<Double>, Vector<Double>>>
  fullName: System.Collections.Generic.IEnumerable<System.ValueTuple<MathNet.Numerics.LinearAlgebra.Vector<System.Double>, MathNet.Numerics.LinearAlgebra.Vector<System.Double>>>
  nameWithType.vb: IEnumerable(Of (T1, T2)(Of Vector(Of Double), Vector(Of Double)))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.ValueTuple(Of MathNet.Numerics.LinearAlgebra.Vector(Of System.Double), MathNet.Numerics.LinearAlgebra.Vector(Of System.Double)))
  name.vb: IEnumerable(Of (T1, T2)(Of Vector(Of Double), Vector(Of Double)))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MathNet.Numerics.LinearAlgebra.Vector`1
    name: Vector
    nameWithType: Vector
    fullName: MathNet.Numerics.LinearAlgebra.Vector
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MathNet.Numerics.LinearAlgebra.Vector`1
    name: Vector
    nameWithType: Vector
    fullName: MathNet.Numerics.LinearAlgebra.Vector
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MathNet.Numerics.LinearAlgebra.Vector`1
    name: Vector
    nameWithType: Vector
    fullName: MathNet.Numerics.LinearAlgebra.Vector
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MathNet.Numerics.LinearAlgebra.Vector`1
    name: Vector
    nameWithType: Vector
    fullName: MathNet.Numerics.LinearAlgebra.Vector
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{MathNet.Numerics.LinearAlgebra.Vector{System.Double}}
  commentId: T:System.Collections.Generic.IEnumerable{MathNet.Numerics.LinearAlgebra.Vector{System.Double}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Vector<Double>>
  nameWithType: IEnumerable<Vector<Double>>
  fullName: System.Collections.Generic.IEnumerable<MathNet.Numerics.LinearAlgebra.Vector<System.Double>>
  nameWithType.vb: IEnumerable(Of Vector(Of Double))
  fullName.vb: System.Collections.Generic.IEnumerable(Of MathNet.Numerics.LinearAlgebra.Vector(Of System.Double))
  name.vb: IEnumerable(Of Vector(Of Double))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MathNet.Numerics.LinearAlgebra.Vector`1
    name: Vector
    nameWithType: Vector
    fullName: MathNet.Numerics.LinearAlgebra.Vector
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MathNet.Numerics.LinearAlgebra.Vector`1
    name: Vector
    nameWithType: Vector
    fullName: MathNet.Numerics.LinearAlgebra.Vector
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NeuralNetLearning.NeuralNet.WriteToDirectory(System.String)
  commentId: M:NeuralNetLearning.NeuralNet.WriteToDirectory(System.String)
  isExternal: true
- uid: NeuralNetLearning.NeuralNetFactory.ReadFromDirectory*
  commentId: Overload:NeuralNetLearning.NeuralNetFactory.ReadFromDirectory
  name: ReadFromDirectory
  nameWithType: NeuralNetFactory.ReadFromDirectory
  fullName: NeuralNetLearning.NeuralNetFactory.ReadFromDirectory
